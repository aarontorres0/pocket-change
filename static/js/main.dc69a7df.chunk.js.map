{"version":3,"sources":["components/IncomeForm.js","components/Entry.js","components/IncomeList.js","components/ExpenseForm.js","App.js","reportWebVitals.js","index.js"],"names":["IncomeForm","balance","setBalance","todos","setTodos","inputText","setInputText","inputDollarText","setDollarInputText","value","onChange","e","console","log","target","type","className","placeholder","onClick","preventDefault","text","amount","parseInt","id","Math","random","Entry","IncomeList","map","entry","ExpenseForm","inputExpenseText","setInputExpenseText","inputExpenseDollarText","setExpenseDollarInputText","expenseTodos","setExpenseTodos","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc69a7df.chunk.js","sourcesContent":["import React from \"react\";\n\nconst IncomeForm = ({\n  balance,\n  setBalance,\n  todos,\n  setTodos,\n  inputText,\n  setInputText,\n  inputDollarText,\n  setDollarInputText,\n}) => {\n  const inputTextHandler = (e) => {\n    console.log(e.target.value);\n    setInputText(e.target.value);\n  };\n  const inputDollarTextHandler = (e) => {\n    setDollarInputText(e.target.value);\n  };\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setTodos([\n      ...todos,\n      {\n        text: inputText,\n        amount: parseInt(inputDollarText),\n        id: Math.random() * 100,\n      },\n    ]);\n    // maybe I should do setBalance here instead of balanceHandler. button onclick calls submithandler\n    setBalance(balance + parseInt(inputDollarText));\n    setInputText(\"\");\n    setDollarInputText(\"\");\n  };\n  const balanceHandler = (e) => {\n    setBalance(12);\n  };\n\n  return (\n    <form>\n      <input\n        value={inputText}\n        onChange={inputTextHandler}\n        type=\"text\"\n        className=\"income-input\"\n        placeholder=\"Input income\"\n      ></input>\n      <input\n        value={inputDollarText}\n        onChange={inputDollarTextHandler}\n        type=\"number\"\n        className=\"income-input-value\"\n        placeholder=\"$\"\n      ></input>\n      <button onClick={submitHandler} className=\"income-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n    </form>\n  );\n};\n\nexport default IncomeForm;\n","import React from \"react\";\n\nconst Entry = ({ text }) => {\n  return (\n    <div className=\"entry\">\n      <li className=\"income-item\">{text}</li>\n    </div>\n  );\n};\n\nexport default Entry;\n","import React from \"react\";\n// Import Components\nimport Entry from \"./Entry\";\n\nconst IncomeList = ({ todos }) => {\n  return (\n    <div className=\"income-container\">\n      <ul className=\"income-list\">\n        {todos.map((entry) => (\n          <Entry id={entry.id} text={entry.text} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default IncomeList;\n","import React from \"react\";\n\nconst ExpenseForm = ({\n  balance,\n  setBalance,\n  inputExpenseText,\n  setInputExpenseText,\n  inputExpenseDollarText,\n  setExpenseDollarInputText,\n  expenseTodos,\n  setExpenseTodos,\n}) => {\n  const inputExpenseTextHandler = (e) => {\n    setInputExpenseText(e.target.value);\n  };\n  const inputExpenseDollarHandler = (e) => {\n    setExpenseDollarInputText(e.target.value);\n  };\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setExpenseTodos([\n      ...expenseTodos,\n      {\n        text: inputExpenseText,\n        amount: parseInt(inputExpenseDollarText),\n        id: Math.random() * 100,\n      },\n    ]);\n    // maybe I should do setBalance here instead of balanceHandler. button onclick calls submithandler\n    setBalance(balance - parseInt(inputExpenseDollarText));\n    setInputExpenseText(\"\");\n    setExpenseDollarInputText(\"\");\n  };\n  const balanceHandler = (e) => {\n    setBalance(12);\n  };\n\n  return (\n    <form>\n      <input\n        value={inputExpenseText}\n        onChange={inputExpenseTextHandler}\n        type=\"text\"\n        className=\"expense-input\"\n        placeholder=\"Input an expense\"\n      ></input>\n      <input\n        value={inputExpenseDollarText}\n        onChange={inputExpenseDollarHandler}\n        type=\"number\"\n        className=\"expense-input-value\"\n        placeholder=\"$\"\n      ></input>\n      <button onClick={submitHandler} className=\"expense-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n//Import components\nimport IncomeForm from \"./components/IncomeForm\";\nimport IncomeList from \"./components/IncomeList\";\nimport ExpenseForm from \"./components/ExpenseForm\";\n\nfunction App() {\n  const [balance, setBalance] = useState(0);\n\n  const [inputText, setInputText] = useState(\"\");\n  const [inputDollarText, setDollarInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n\n  const [inputExpenseText, setInputExpenseText] = useState(\"\");\n  const [inputExpenseDollarText, setExpenseDollarInputText] = useState(\"\");\n  const [expenseTodos, setExpenseTodos] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Pocket Change</h1>\n      </header>\n      <div>\n        <h2 className=\"budget\">Total Leftover: ${balance}</h2>\n      </div>\n      <IncomeForm\n        balance={balance}\n        setBalance={setBalance}\n        inputText={inputText}\n        setInputText={setInputText}\n        inputDollarText={inputDollarText}\n        setDollarInputText={setDollarInputText}\n        todos={todos}\n        setTodos={setTodos}\n      />\n      <IncomeList todos={todos} />\n      <ExpenseForm\n        balance={balance}\n        setBalance={setBalance}\n        inputExpenseText={inputExpenseText}\n        setInputExpenseText={setInputExpenseText}\n        inputExpenseDollarText={inputExpenseDollarText}\n        setExpenseDollarInputText={setExpenseDollarInputText}\n        expenseTodos={expenseTodos}\n        setExpenseTodos={setExpenseTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}